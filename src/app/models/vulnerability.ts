import {Result} from './results';
import {basename} from 'path';

export class CodeLocation {
  line: number;
  column: number;
  file: string;

  constructor(locJSON) {
    this.line = locJSON.line;
    this.column = locJSON.col;
    this.file = locJSON.file;
  }
}

export class VulnerabilityStep {
  description: string;
  startLocation: CodeLocation;
  endLocation: CodeLocation;
  isNumbered = false;

  constructor(description, startLoc, endLoc) {
    this.description = description;
    this.startLocation = new CodeLocation(startLoc);
    this.endLocation = new CodeLocation(endLoc);
  }
}

export class Vulnerability {
  description: string;
  category: string;
  type: string;
  location: CodeLocation;
  steps: VulnerabilityStep[] = [];

  constructor(vulnJSON: any) {
    this.description = vulnJSON.description;
    this.category = vulnJSON.category;
    this.type = vulnJSON.type;
    this.location = new CodeLocation(vulnJSON.location);
    for (const stepJSON of vulnJSON.path) {
      if (stepJSON.kind === 'event') {
        if ('ranges' in stepJSON) {
          this.steps.push(new VulnerabilityStep(
            stepJSON.message, stepJSON.ranges[0][0], stepJSON.ranges[0][1]
          ));
        } else {
          this.steps.push(new VulnerabilityStep(
            stepJSON.message,
            stepJSON.location,
            {line: stepJSON.location.line, col: 80, file: stepJSON.location.file},
          ));
        }
      }
    }
  }
}

export interface VulnerabilityCategory {
  isExpanded: boolean;
  isSelected: boolean;
  name: string;
  vulnerabilities: Vulnerability[];
}

export function groupIntoCategories(result: Result): VulnerabilityCategory[] {
  const report = {};
  for (const vulnerability of result.vulnerabilities) {
    report[vulnerability.category] = report[vulnerability.category] || [];
    report[vulnerability.category].push(vulnerability);
  }
  return Object.keys(report).map(category_name => {
    const sorted_vulnerabilities = report[category_name].sort(
      (a: Vulnerability, b: Vulnerability) => {
        const name_a = basename(a.location.file);
        const name_b = basename(b.location.file);
        return name_a.localeCompare(name_b);
      });
    return {
      isExpanded: false,
      isSelected: false,
      name: category_name,
      vulnerabilities: sorted_vulnerabilities
    };
  });
}

